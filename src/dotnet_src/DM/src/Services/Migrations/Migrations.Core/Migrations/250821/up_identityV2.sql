CREATE SCHEMA IF NOT EXISTS identity;


CREATE TABLE IF NOT EXISTS identity.users
(
    id                   bigint generated by default as identity
        constraint pk_users
            PRIMARY KEY,
    guid_id              uuid         not null,
    name                 varchar(250) not null,
    created_at           timestamp with time zone default now(),
    updated_at           timestamp with time zone default now(), -- будет нативное поле now()
    is_confirmed         boolean      not null    default false,
    confirmed_changed_at timestamp with time zone default now(),
    is_blocked           boolean      not null    default false,
    blocked_changed_at   timestamp with time zone default now(),
    blocked_reason_code  int,
    blocked_reason       text
);

CREATE TABLE IF NOT EXISTS identity.tg_users
(
    user_id    bigint not null
        constraint fk_users_roles_user_id
            references identity.users
            on delete restrict,
    tg_account_id bigint
        constraint fk_account_telegram_id
            references telegram.accounts
            on delete restrict,
    constraint pk_users_roles
        primary key (user_id, tg_account_id)
);


CREATE TABLE IF NOT EXISTS identity.users_email
(
    user_id                   bigint       not null
        constraint fk_users_roles_user_id
            references identity.users
            on delete restrict
        PRIMARY KEY,
    email                     varchar(100) not null UNIQUE,
    password_hash             varchar(200) not null,
    password_salt             varchar(200) not null,
    is_confirmed              boolean      not null default false,
    confirmed_changed_at      timestamp with time zone,
    confirmed_code            varchar(50),
    confirmed_code_expires_at timestamp with time zone
);


create index if not exists idx_users_email on identity.users_email (email);
create index if not exists idx_users_email_confirmed_code
    on identity.users_email (confirmed_code)
    INCLUDE (is_confirmed, confirmed_code_expires_at);
--create index if not exists idx_password_hash on identity.users_email(password_hash);
--create index if not exists idx_password_salt on identity.users_email(password_salt);


CREATE TABLE IF NOT EXISTS identity.users_phone
(
    user_id                   bigint      not null
        constraint fk_users_roles_user_id
            references identity.users
            on delete restrict
        PRIMARY KEY,
    phone                     varchar(15) not null UNIQUE,
    is_confirmed              boolean     not null default false,
    confirmed_changed_at      timestamp with time zone,
    confirmed_code            varchar(50),
    confirmed_code_expires_at timestamp with time zone
);

create index if not exists idx_users_phone on identity.users_phone (phone);
create index if not exists idx_users_phone_confirmed_code
    on identity.users_phone (confirmed_code)
    INCLUDE (is_confirmed, confirmed_code_expires_at);


CREATE TABLE IF NOT EXISTS identity.external_providers
(
    user_id             bigint      not null
        constraint fk_users_roles_user_id
            references identity.users
            on delete restrict
        PRIMARY KEY,
    provider            varchar(10) not null,
    provider_user_id    text        NOT NULL,

    email_from_provider text,
    display_name        text,
    avatar_url          text,

    --- если нужны будут сессии от провайдера
    access_token        text,
    refresh_token       text,
    token_expires_at    timestamptz,

    raw_profile         jsonb,

    is_primary          boolean     NOT NULL DEFAULT false,

    created_at          timestamptz NOT NULL DEFAULT now(),
    updated_at          timestamptz NOT NULL DEFAULT now(),
    last_used_at        timestamptz
);


CREATE UNIQUE INDEX IF NOT EXISTS ux_external_identity_provider_user
    ON identity.external_providers (provider, provider_user_id);


-- уникальность is_primary
CREATE UNIQUE INDEX IF NOT EXISTS ux_external_primary_per_user_provider
    ON identity.external_providers (user_id, provider)
    WHERE is_primary;

--------------------------------------------
--------------------------------------------
--------------------------------------------

CREATE TABLE IF NOT EXISTS identity.roles
(
    id      bigint generated by default as identity
        constraint pk_roles
            primary key,
    guid_id uuid not null,
    name    text not null UNIQUE,
    alias   text not null UNIQUE
);

create index if not exists idx_sessions_guid_id on identity.roles (guid_id);


CREATE TABLE IF NOT EXISTS identity.users_roles
(
    user_id bigint not null
        constraint fk_users_roles_user_id
            references identity.users
            on delete restrict,
    role_id bigint not null
        constraint fk_users_roles_role_id
            references identity.roles
            on delete restrict,
    constraint pk_users_roles
        primary key (user_id, role_id)
);


CREATE TABLE IF NOT EXISTS identity.sessions
(
    id                       bigint generated by default as identity
        constraint pk_sessions
            PRIMARY KEY,
    user_id                  bigint      not null
        constraint fk_sessions_user_id
            references identity.users
            on delete restrict,
    provider                 varchar(10) not null,
    guid_id                  uuid        not null,
    created_at               timestamp with time zone default now(),
    access_token             text        not null,
    refresh_token            text        not null,
    refresh_token_expires_at timestamp with time zone default now(),
    fingerprint              text        not null,
    ip                       inet
);

create index if not exists idx_sessions_guid_id on identity.sessions (guid_id);






