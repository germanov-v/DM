CREATE SCHEMA IF NOT EXISTS identity;


CREATE TABLE IF NOT EXISTS identity.users
(
    id                   bigint generated by default as identity
        constraint pk_users
            PRIMARY KEY,
    guid_id              uuid         not null,
    name                 varchar(250) not null,
    created_at           timestamp with time zone default now(),
    updated_at           timestamp with time zone default now(), -- будет нативное поле now()
    is_confirmed         boolean      not null    default false,
    confirmed_changed_at timestamp with time zone default now(),
    is_blocked           boolean      not null    default false,
    blocked_changed_at   timestamp with time zone default now(),
    blocked_reason_code  int,
    blocked_reason       text
);

CREATE TABLE IF NOT EXISTS identity.tg_users
(
    user_id    bigint not null
        constraint fk_users_roles_user_id
            references identity.users
            on delete restrict,
    tg_account_id bigint
        constraint fk_account_telegram_id
            references telegram.accounts
            on delete restrict,
    constraint pk_users_roles
        primary key (user_id, tg_account_id)
);


CREATE TABLE IF NOT EXISTS identity.users_email
(
    user_id                   bigint       not null
        constraint fk_users_roles_user_id
            references identity.users
            on delete restrict
        PRIMARY KEY,
    email                     varchar(100) not null UNIQUE,
    password_hash             varchar(200) not null,
    password_salt             varchar(200) not null,
    is_confirmed              boolean      not null default false,
    confirmed_changed_at      timestamp with time zone,
    confirmed_code            varchar(50),
    confirmed_code_expires_at timestamp with time zone
);


create index if not exists idx_users_email on identity.users_email (email);
create index if not exists idx_users_email_confirmed_code
    on identity.users_email (confirmed_code)
    INCLUDE (is_confirmed, confirmed_code_expires_at);
--create index if not exists idx_password_hash on identity.users_email(password_hash);
--create index if not exists idx_password_salt on identity.users_email(password_salt);


CREATE TABLE IF NOT EXISTS identity.users_phone
(
    user_id                   bigint      not null
        constraint fk_users_roles_user_id
            references identity.users
            on delete restrict
        PRIMARY KEY,
    phone                     varchar(15) not null UNIQUE,
    is_confirmed              boolean     not null default false,
    confirmed_changed_at      timestamp with time zone,
    confirmed_code            varchar(50),
    confirmed_code_expires_at timestamp with time zone
);

create index if not exists idx_users_phone on identity.users_phone (phone);
create index if not exists idx_users_phone_confirmed_code
    on identity.users_phone (confirmed_code)
    INCLUDE (is_confirmed, confirmed_code_expires_at);


CREATE TABLE IF NOT EXISTS identity.external_providers
(
    user_id             bigint      not null
        constraint fk_users_roles_user_id
            references identity.users
            on delete restrict
        PRIMARY KEY,
    provider            varchar(10) not null,
    provider_user_id    text        NOT NULL,

    email_from_provider text,
    display_name        text,
    avatar_url          text,

    --- если нужны будут сессии от провайдера
    access_token        text,
    refresh_token       text,
    token_expires_at    timestamptz,

    raw_profile         jsonb,

    is_primary          boolean     NOT NULL DEFAULT false,

    created_at          timestamptz NOT NULL DEFAULT now(),
    updated_at          timestamptz NOT NULL DEFAULT now(),
    last_used_at        timestamptz
);


CREATE UNIQUE INDEX IF NOT EXISTS ux_external_identity_provider_user
    ON identity.external_providers (provider, provider_user_id);


-- уникальность is_primary
CREATE UNIQUE INDEX IF NOT EXISTS ux_external_primary_per_user_provider
    ON identity.external_providers (user_id, provider)
    WHERE is_primary;

--------------------------------------------
--------------------------------------------
--------------------------------------------

CREATE TABLE IF NOT EXISTS identity.roles
(
    id      bigint generated by default as identity
        constraint pk_roles
            primary key,
    guid_id uuid not null,
    name    text not null UNIQUE,
    alias   text not null UNIQUE
);

create index if not exists idx_sessions_guid_id on identity.roles (guid_id);


CREATE TABLE IF NOT EXISTS identity.users_roles
(
    user_id bigint not null
        constraint fk_users_roles_user_id
            references identity.users
            on delete restrict,
    role_id bigint not null
        constraint fk_users_roles_role_id
            references identity.roles
            on delete restrict,
    constraint pk_users_roles
        primary key (user_id, role_id)
);


CREATE TABLE IF NOT EXISTS identity.sessions
(
    id                       bigint generated by default as identity
        constraint pk_sessions
            PRIMARY KEY,
    user_id                  bigint      not null
        constraint fk_sessions_user_id
            references identity.users
            on delete restrict,
    provider                 varchar(10) not null,
    guid_id                  uuid        not null,
    created_at               timestamp with time zone default now(),
    access_token             text        not null,
    refresh_token            text        not null,
    refresh_token_expires_at timestamp with time zone default now(),
    fingerprint              text        not null,
    ip                       inet
);

create index if not exists idx_sessions_guid_id on identity.sessions (guid_id);



CREATE TABLE IF NOT EXISTS identity.web_anonymous
(
    id                 BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    user_id bigint 
        constraint fk_web_anonymous_user_id
              references identity.users
            on delete restrict,
    
    guid_id                  uuid        not null,
    browser_fp_hash    BYTEA,                        -- хэш отпечатка браузера (если используете)

    last_ip            INET,
    user_agent         TEXT,
    locale             VARCHAR(32),                  -- Accept-Language
    tz_offset_min      SMALLINT,                     -- смещение час.пояса в минутах
    screen             VARCHAR(32),                  -- "1920x1080@2"
    referrer           TEXT,

    consent_cookies    BOOLEAN     NOT NULL DEFAULT FALSE,

    first_seen_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
    last_seen_at       TIMESTAMPTZ NOT NULL DEFAULT now()
    );

create index if not exists idx_web_anonymous_user_id on identity.web_anonymous (user_id) WHERE user_id NOT NULL;
create index if not exists idx_web_anonymous_guid_id on identity.web_anonymous (guid_id);
-- ключи/индексы (cookie client_id = главный)
CREATE UNIQUE INDEX IF NOT EXISTS ux_web_anonymous_client_id ON chats.web_anonymous(client_id);
CREATE UNIQUE INDEX IF NOT EXISTS ux_web_anonymous_fp       ON chats.web_anonymous(browser_fp_hash) WHERE browser_fp_hash IS NOT NULL;
CREATE INDEX        IF NOT EXISTS ix_web_anonymous_last_ip  ON chats.web_anonymous(last_ip);
CREATE INDEX        IF NOT EXISTS ix_web_anonymous_seen     ON chats.web_anonymous(last_seen_at);


CREATE TABLE IF NOT EXISTS chats.ios_install
(
    id                 BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    user_id bigint
            constraint fk_ios_install_user_id
                references identity.users
                on delete restrict,

    guid_id                  uuid        not null,
    
    -- стабильные идентификаторы
    install_id         UUID        NOT NULL,         -- сгенерированный и сохранённый в Keychain
    idfv               UUID,                          -- Identifier For Vendor (может меняться при удалении всех приложений)
-- контекст
    device_model       VARCHAR(64),
    os_version         VARCHAR(32),                   -- например "iOS 17.5"
    app_version        VARCHAR(32),
    locale             VARCHAR(32),
    tz_offset_min      SMALLINT,

    push_token         TEXT,                          -- ротируется → не уникальный, не ключ
    push_token_seen_at TIMESTAMPTZ,

    first_seen_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
    last_seen_at       TIMESTAMPTZ NOT NULL DEFAULT now()
    );
create index if not exists idx_ios_install_user_id on identity.ios_install (user_id) WHERE user_id NOT NULL;
create index if not exists idx_ios_install_guid_id on identity.ios_install (guid_id);

-- индексы (главный ключ соответствия — install_id)
CREATE UNIQUE INDEX IF NOT EXISTS ux_ios_install_install_id ON identity.ios_install(install_id);
CREATE INDEX        IF NOT EXISTS ix_ios_install_ios_idfv       ON identity.ios_install(idfv) WHERE idfv IS NOT NULL;
CREATE INDEX        IF NOT EXISTS ix_ios_install_ios_seen        ON identity.ios_install(last_seen_at);




