CREATE SCHEMA IF NOT EXISTS reference;


-- designer, market, vendor, door_installer, build_team
-- create table reference.profile_types
-- (
--     id    bigint generated by default as identity
--         constraint pk_base_data
--             primary key,
--     alias text  not null,
--     name text not null,
--     description not null
-- );

-- create unique index if not exists idx_profile_types_alias
--     on reference.profile_types(alias)
--     INCLUDE  (id, name) -- covering indexes
--     using btree(alias);
-- 
-- -- modern, hightech, retro
-- create table reference.styles
-- (
--     id    bigint generated by default as identity
--         constraint pk_base_data
--             primary key,
--     alias text  not null,
--     name text not null,
--     description not null
-- );
-- 
-- create unique index if not exists idx_styles_alias
--     on reference.styles(alias)
--     INCLUDE  (id, name) -- covering indexes
--     using btree(alias);



create table reference.geo_base_data
(
    id    bigint generated by default as identity
        constraint pk_geo_base_data
            primary key,
    alias text  not null,
    data  jsonb not null
);


create table reference.geo_country
(
    id          bigint generated by default as identity
        constraint pk_geo_country
            primary key,
    alias       text    not null,
    name        text    not null,
    guid_id     uuid    not null,
    is_disabled boolean not null,
    num_order   bigint  not null,
    ext_id      varchar(38),
    ext_url     varchar(1024)
);



create index idx_geo_country_ext_id
    on reference.geo_country (ext_id);

create unique index idx_geo_country_ext_id_ext_url
    on reference.geo_country (ext_id, ext_url)
    where ((ext_id IS NOT NULL) AND (ext_url IS NOT NULL));

create table reference.geo_region
(
    id          bigint generated by default as identity
        constraint pk_geo_region
            primary key,
    country_id  bigint  not null
        constraint fk_geo_region_geo_country_country_id
            references reference.geo_country
            on delete restrict,
    alias       text    not null,
    name        text    not null,
    guid_id     uuid    not null,
    is_disabled boolean not null,
    num_order   bigint  not null,
    ext_id      varchar(38),
    ext_url     varchar(1024)
);


create table reference.geo_city
(
    id          bigint generated by default as identity
        constraint pk_geo_city
            primary key,
    region_id   bigint  not null
        constraint fk_geo_city_region_geo_region_id
            references reference.geo_region
            on delete restrict,
    alias       text    not null,
    name        text    not null,
    guid_id     uuid    not null,
    is_disabled boolean not null,
    num_order   bigint  not null,
    ext_id      varchar(38),
    ext_url     varchar(1024)
);


create index idx_geo_city_ext_id
    on reference.geo_city (ext_id);

create unique index idx_geo_city_ext_id_ext_url
    on reference.geo_city (ext_id, ext_url)
    where ((ext_id IS NOT NULL) AND (ext_url IS NOT NULL)); -- partial indexes

create index idx_geo_city_region_id
    on reference.geo_city (region_id);

create index idx_geo_region_country_id
    on reference.geo_region (country_id);

create index idx_geo_region_ext_id
    on reference.geo_region (ext_id);

create unique index idx_geo_region_ext_id_ext_url
    on reference.geo_region (ext_id, ext_url)
    where ((ext_id IS NOT NULL) AND (ext_url IS NOT NULL));

