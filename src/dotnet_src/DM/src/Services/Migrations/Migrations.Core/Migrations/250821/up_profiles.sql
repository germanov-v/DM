CREATE SCHEMA IF NOT EXISTS profiles;

-- type profiles: Designer, ShowRoom, Installer, Vendors

-- profiles
CREATE TABLE IF NOT EXISTS profiles.profiles
(
    id               bigint generated by default as identity
        constraint pk_profiles
        PRIMARY KEY,
    guid_id          UUID   NOT NULL,
    user_id          bigint
        constraint fk_user_id
        references identity.users
        on delete restrict,
    type varchar(15) not null, -- Designer, ShowRoom, Installer, Vendors
    is_verified BOOLEAN not null default false,
    verified_change_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    verified_by_user_id  bigint
        constraint fk_user_verified_id
        references identity.users
        on delete restrict,
    verified_type varchar(15), -- auto, manual
    created_at           timestamp with time zone default now(),
    updated_at           timestamp with time zone default now(),
    city_id  bigint
        constraint fk_profiles_city_id
        references reference.geo_city
            on delete restrict,
    description text, -- публичное описание
    comment_to_moderator text, -- оставляет пользователь
    moderator_comment text -- для внутреннего использования

    );

CREATE UNIQUE INDEX IF NOT EXISTS idx_profiles_guid_id ON profiles.profiles (guid_id );
CREATE  INDEX IF NOT EXISTS idx_profiles_created_at ON profiles.profiles (created_at );
CREATE  INDEX IF NOT EXISTS idx_profiles_user_id ON profiles.profiles(user_id);
create index  IF NOT EXISTS idx_profiles_geo_city_id on profiles.profiles (city_id);


CREATE TABLE IF NOT EXISTS profiles.profile_brands
(
    profile_id bigint not null
        constraint fk_profile_brands_profile_id
        references profiles.profiles
        on delete restrict,
    brand_id bigint not null
        constraint fk_profile_brands_brand_id
        references products.brands
        on delete restrict,
    constraint pk_profile_brands primary key (profile_id, brand_id)
);
CREATE INDEX IF NOT EXISTS idx_profile_brands_brand_id
    ON profiles.profile_brands (brand_id);


CREATE TABLE IF NOT EXISTS profiles.profile_sections
(
    profile_id bigint not null
        constraint fk_profile_sections_profile_id
        references profiles.profiles
        on delete restrict,
    section_id bigint not null
        constraint fk_profile_sections_section_id
        references products.sections
        on delete restrict,
    constraint pk_profile_sections primary key (profile_id, section_id)
);
CREATE INDEX IF NOT EXISTS idx_profile_sections_section_id
    ON profiles.profile_sections (section_id);

CREATE TABLE IF NOT EXISTS profiles.profile_files
(
    file_id bigint not null
        constraint fk_profile_files_file_id
        references files.files
        on delete restrict,
    profile_id bigint not null
        constraint fk_profile_files_profile_id
        references profiles.profiles
        on delete restrict,
    constraint pk_profile_files  primary key (file_id, profile_id)
 );
CREATE INDEX IF NOT EXISTS idx_profile_files_profile_id
    ON profiles.profile_files (profile_id);


-- offices
CREATE EXTENSION IF NOT EXISTS postgis;

CREATE TABLE IF NOT EXISTS profiles.locations
(
    id               bigint generated by default as identity
        constraint pk_locations
        PRIMARY KEY,
    guid_id          UUID   NOT NULL,
    profile_id          bigint
        constraint fk_locations_profile_id
        references profiles.profiles
        on delete restrict,
    type varchar(15) not null, -- showroom, factory, storage
    is_verified BOOLEAN not null default false,
    verified_change_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    verified_by_user_id  bigint
        constraint fk_user_verified_id
        references identity.users
        on delete restrict,
    verified_type varchar(15), -- auto, manual
    created_at           timestamp with time zone default now(),
    updated_at           timestamp with time zone default now(),
    city_id  bigint
        constraint fk_profiles_city_id
        references reference.geo_city
        on delete restrict,
    name text,
    description text, -- публичное описание
    comment_to_moderator text, -- оставляет пользователь
    moderator_comment text, -- для внутреннего использования
    location geography(Point, 4326) NOT NULL, -- Point — тип точки. -- 4326 — стандартная система координат WGS84 (GPS)
    yandex_map TEXT
    
);
CREATE INDEX IF NOT EXISTS idx_locations_created_at ON profiles.locations (created_at);
CREATE INDEX IF NOT EXISTS idx_locations_profile_id ON profiles.locations (profile_id);
CREATE UNIQUE INDEX IF NOT EXISTS idx_locations_guid_id ON profiles.locations (guid_id );
create index  IF NOT EXISTS idx_locations_geo_city_id on profiles.locations (city_id);
CREATE INDEX  IF NOT EXISTS idx_locations_location ON profiles.locations USING GIST (location);


CREATE TABLE IF NOT EXISTS profiles.location_brands
(
    location_id bigint not null
        constraint fk_location_brands_profile_id
        references profiles.locations
        on delete restrict,
    brand_id bigint not null
        constraint fk_location_brands_brand_id
        references products.brands
        on delete restrict,
    constraint pk_location_brands primary key (location_id, brand_id)
    );
CREATE INDEX IF NOT EXISTS idx_location_brands_brand_id
    ON profiles.location_brands (brand_id);

CREATE TABLE IF NOT EXISTS profiles.location_sections
(
    location_id bigint not null
        constraint fk_location_sections_location_id
        references profiles.locations
        on delete restrict,
    section_id bigint not null
        constraint fk_location_sections_section_id
        references products.sections
        on delete restrict,
    constraint pk_location_sections primary key (location_id, section_id)
);
CREATE INDEX IF NOT EXISTS idx_location_sections_section_id
    ON profiles.location_sections (section_id);


CREATE TABLE IF NOT EXISTS profiles.location_products
(
    location_id bigint not null
        constraint fk_location_products_profile_id
        references profiles.locations
        on delete restrict,
    product_id bigint not null
        constraint fk_location_products_section_id
        references products.products
        on delete restrict,
    constraint pk_location_products primary key (location_id, product_id)
    );
CREATE INDEX IF NOT EXISTS idx_location_products_product_id
    ON profiles.location_products (product_id);


CREATE TABLE IF NOT EXISTS profiles.file_locations
(
    file_id bigint not null
        constraint fk_file_locations_file_id
        references files.files
        on delete restrict,
    location_id bigint not null
        constraint fk_file_locations_profile_id
        references profiles.locations
        on delete restrict,
    constraint pk_file_locations  primary key (file_id, location_id)
);
CREATE INDEX IF NOT EXISTS idx_file_locations_location_id
    ON profiles.file_locations (location_id);



-- portfolio
CREATE TABLE IF NOT EXISTS profiles.portfolio
(
    id               bigint generated by default as identity
        constraint pk_portfolio
        PRIMARY KEY,
    guid_id          UUID   NOT NULL,
    profile_id          bigint
        constraint fk_portfolio_profile_id
        references identity.users
        on delete restrict,
    is_verified BOOLEAN not null default false,
    verified_change_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    verified_by_user_id  bigint
        constraint fk_user_verified_id
        references identity.users
        on delete restrict,
    verified_type varchar(15), -- auto, manual
    created_at           timestamp with time zone default now(),
    updated_at           timestamp with time zone default now(),
    name text,
    description text, -- публичное описание
    comment_to_moderator text, -- оставляет пользователь
    moderator_comment text -- для внутреннего использования
    
    );
CREATE INDEX IF NOT EXISTS idx_portfolio_created_at ON profiles.portfolio (created_at);
CREATE INDEX IF NOT EXISTS idx_portfolio_profile_id ON profiles.portfolio (profile_id);
CREATE UNIQUE INDEX IF NOT EXISTS idx_portfolio_guid_id ON profiles.portfolio (guid_id );

CREATE TABLE IF NOT EXISTS profiles.portfolio_brands
(
    portfolio_id bigint not null
        constraint fk_portfolio_brands_profile_id
        references profiles.portfolio
        on delete restrict,
    brand_id bigint not null
        constraint fk_portfolio_brands_brand_id
        references products.brands
        on delete restrict,
    constraint pk_portfolio_brands primary key (portfolio_id, brand_id)
    );
CREATE INDEX IF NOT EXISTS idx_portfolio_brands_brand_id
    ON profiles.portfolio_brands (brand_id);

CREATE TABLE IF NOT EXISTS profiles.portfolio_sections
(
    portfolio_id bigint not null
        constraint fk_portfolio_sections_profile_id
        references profiles.portfolio
        on delete restrict,
    section_id bigint not null
        constraint fk_portfolio_sections_section_id
        references products.sections
        on delete restrict,
    constraint pk_portfolio_sections primary key (portfolio_id, section_id)
    );
CREATE INDEX IF NOT EXISTS idx_portfolio_sections_section_id
    ON profiles.portfolio_sections (section_id);


CREATE TABLE IF NOT EXISTS profiles.portfolio_files
(
    file_id bigint not null
        constraint fk_portfolio_files_file_id
        references files.files
        on delete restrict,
    portfolio_id bigint not null
        constraint fk_portfolio_files_profile_id
        references profiles.portfolio
        on delete restrict,
    constraint pk_portfolio_files  primary key (file_id, portfolio_id)
);
CREATE INDEX IF NOT EXISTS idx_portfolio_files_portfolio_id
    ON profiles.portfolio_files (portfolio_id);

CREATE TABLE IF NOT EXISTS profiles.portfolio_products
(
    portfolio_id bigint not null
        constraint fk_portfolio_products_profile_id
        references profiles.portfolio
        on delete restrict,
    product_id bigint not null
        constraint fk_portfolio_products_products_id
        references products.products
        on delete restrict,
    constraint pk_portfolio_products primary key (portfolio_id, product_id)
);
CREATE INDEX IF NOT EXISTS idx_portfolio_products_product_id
    ON profiles.portfolio_products (product_id);




