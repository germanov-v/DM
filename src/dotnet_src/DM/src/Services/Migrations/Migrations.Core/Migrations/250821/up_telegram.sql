
CREATE SCHEMA IF NOT EXISTS telegram;

CREATE TABLE IF NOT EXISTS telegram.accounts
(
    id                BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    guid_id           uuid        NOT NULL,
    tg_user_id        BIGINT      NOT NULL,
    tg_is_bot         BOOLEAN     NOT NULL DEFAULT FALSE,

    username          TEXT,                      -- @username (nullable, меняется)
    first_name        TEXT,
    last_name         TEXT,
    language_code     VARCHAR(15),                      -- "ru","en" и т.п.
    is_premium        BOOLEAN,                   --
    phone             VARCHAR(15),
    is_anonymous      BOOLEAN default true,   -- если телефон, то должно быть false
    change_phone_at   TIMESTAMPTZ NOT NULL DEFAULT now(),
    added_at          TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at        TIMESTAMPTZ NOT NULL DEFAULT now(),

    last_seen_at      TIMESTAMPTZ,
    last_message_at   TIMESTAMPTZ
);

CREATE UNIQUE INDEX IF NOT EXISTS ux_accounts_tg_user_id ON telegram.accounts(tg_user_id);
CREATE INDEX IF NOT EXISTS ix_accounts_username ON telegram.accounts(username);
CREATE INDEX IF NOT EXISTS ix_accounts_last_seen ON telegram.accounts(last_seen_at);
create index if not exists idx_accounts_guid_id on telegram.accounts(guid_id);
CREATE INDEX IF NOT EXISTS ix_accounts_last_seen ON telegram.accounts(phone)
    WHERE  phone IS NOT NULL;

CREATE TABLE IF NOT EXISTS telegram.accounts_bots
(
    tg_account_id BIGINT NOT NULL
            constraint fk_telegram_accounts_user_id
            references telegram.accounts
            on delete restrict,
    tg_bot_id BIGINT NOT NULL,
    constraint pk_users_roles
         primary key (tg_account_id, tg_bot_id)
);

CREATE INDEX IF NOT EXISTS ix_tg_bot_id ON telegram.accounts_bots(tg_bot_id);