// <auto-generated />
using System;
using System.Net;
using Core.Infrastructure.Migrations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Core.Infrastructure.Migrations.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    partial class CoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ALARM")
                .HasAnnotation("ProductVersion", "10.0.0-rc.1.25451.107")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Domain.BoundedContext.Identity.Aggregates.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("alias");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("uuid")
                        .HasColumnName("guid_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("GuidId")
                        .HasDatabaseName("ix_roles_guid_id");

                    b.ToTable("roles", "identity");
                });

            modelBuilder.Entity("Core.Domain.BoundedContext.Identity.Aggregates.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Fingerprint")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fingerprint");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("uuid")
                        .HasColumnName("guid_id");

                    b.Property<IPAddress>("IpAddress")
                        .HasColumnType("inet")
                        .HasColumnName("ip_address");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("provider");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTimeOffset?>("RefreshTokenExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expires_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_sessions");

                    b.HasIndex("GuidId")
                        .HasDatabaseName("ix_sessions_guid_id");

                    b.HasIndex("Provider")
                        .HasDatabaseName("ix_sessions_provider");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasDatabaseName("ix_sessions_refresh_token");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("RefreshToken"), new[] { "Provider", "RefreshTokenExpiresAt" });

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_sessions_user_id");

                    b.ToTable("sessions", "identity");
                });

            modelBuilder.Entity("Core.Domain.BoundedContext.Identity.Aggregates.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("BlockedChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("blocked_changed_at");

                    b.Property<string>("BlockedReason")
                        .HasColumnType("text")
                        .HasColumnName("blocked_reason");

                    b.Property<int?>("BlockedReasonCode")
                        .HasColumnType("integer")
                        .HasColumnName("blocked_reason_code");

                    b.Property<DateTimeOffset>("ConfirmedChangeAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmed_change_at");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("uuid")
                        .HasColumnName("guid_id");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_blocked");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_confirmed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("GuidId")
                        .HasDatabaseName("ix_users_guid_id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_users_name");

                    b.ToTable("users", "identity");
                });

            modelBuilder.Entity("user_roles", b =>
                {
                    b.Property<long>("user_id")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("role_id")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("user_id", "role_id")
                        .HasName("pk_user_roles");

                    b.HasIndex("role_id")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("user_roles", "identity");
                });

            modelBuilder.Entity("Core.Domain.BoundedContext.Identity.Aggregates.Session", b =>
                {
                    b.HasOne("Core.Domain.BoundedContext.Identity.Aggregates.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_sessions_users_user_id");
                });

            modelBuilder.Entity("Core.Domain.BoundedContext.Identity.Aggregates.User", b =>
                {
                    b.OwnsOne("Core.Domain.BoundedContext.Identity.Entities.EmailCredential", "Email", b1 =>
                        {
                            b1.Property<long>("user_id")
                                .HasColumnType("bigint")
                                .HasColumnName("user_id");

                            b1.Property<DateTimeOffset?>("ConfirmedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("confirmed_at");

                            b1.Property<string>("ConfirmedCode")
                                .HasColumnType("text")
                                .HasColumnName("confirmed_code");

                            b1.Property<DateTimeOffset?>("ConfirmedCodeExpiresAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("confirmed_code_expires_at");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("email");

                            b1.Property<bool>("IsConfirmed")
                                .HasColumnType("boolean")
                                .HasColumnName("is_confirmed");

                            b1.Property<string>("PasswordHash")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("password_hash");

                            b1.HasKey("user_id")
                                .HasName("pk_users_email");

                            b1.HasIndex("ConfirmedCode")
                                .HasDatabaseName("ix_users_email_confirmed_code");

                            NpgsqlIndexBuilderExtensions.IncludeProperties(b1.HasIndex("ConfirmedCode"), new[] { "ConfirmedAt" });

                            b1.HasIndex("Email")
                                .HasDatabaseName("ix_users_email_email");

                            b1.ToTable("users_email", "identity");

                            b1.WithOwner()
                                .HasForeignKey("user_id")
                                .HasConstraintName("fk_users_email_users_user_id");
                        });

                    b.OwnsMany("Core.Domain.BoundedContext.Identity.Entities.ExternalIdentity", "ExternalIdentities", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("Id"));

                            b1.Property<string>("AccessToken")
                                .HasColumnType("text")
                                .HasColumnName("access_token");

                            b1.Property<string>("AvatarUrl")
                                .HasColumnType("text")
                                .HasColumnName("avatar_url");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<string>("DisplayName")
                                .HasColumnType("text")
                                .HasColumnName("display_name");

                            b1.Property<string>("EmailFromProvider")
                                .HasColumnType("text")
                                .HasColumnName("email_from_provider");

                            b1.Property<Guid>("GuidId")
                                .HasColumnType("uuid")
                                .HasColumnName("guid_id");

                            b1.Property<bool>("IsPrimary")
                                .HasColumnType("boolean")
                                .HasColumnName("is_primary");

                            b1.Property<DateTimeOffset?>("LastUsedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("last_used_at");

                            b1.Property<string>("Provider")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("provider");

                            b1.Property<string>("ProviderUserId")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("provider_user_id");

                            b1.Property<string>("RawProfileJson")
                                .HasColumnType("jsonb")
                                .HasColumnName("raw_profile_json");

                            b1.Property<string>("RefreshToken")
                                .HasColumnType("text")
                                .HasColumnName("refresh_token");

                            b1.Property<DateTimeOffset?>("TokenExpiresAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("token_expires_at");

                            b1.Property<DateTimeOffset>("UpdatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_at");

                            b1.Property<long>("user_id")
                                .HasColumnType("bigint")
                                .HasColumnName("user_id");

                            b1.HasKey("Id")
                                .HasName("pk_external_providers");

                            b1.HasIndex("GuidId")
                                .HasDatabaseName("ix_external_providers_guid_id");

                            b1.HasIndex("Provider")
                                .HasDatabaseName("ix_external_providers_provider");

                            b1.HasIndex("ProviderUserId")
                                .HasDatabaseName("ix_external_providers_provider_user_id");

                            b1.HasIndex("Provider", "ProviderUserId")
                                .IsUnique()
                                .HasDatabaseName("ix_external_providers_provider_provider_user_id");

                            b1.HasIndex("user_id", "Provider")
                                .IsUnique()
                                .HasDatabaseName("ix_external_providers_user_id_provider");

                            b1.ToTable("external_providers", "identity");

                            b1.WithOwner()
                                .HasForeignKey("user_id")
                                .HasConstraintName("fk_external_providers_users_user_id");
                        });

                    b.OwnsOne("Core.Domain.BoundedContext.Identity.Entities.PhoneCredential", "Phone", b1 =>
                        {
                            b1.Property<long>("user_id")
                                .HasColumnType("bigint")
                                .HasColumnName("user_id");

                            b1.Property<DateTimeOffset?>("ConfirmedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("confirmed_at");

                            b1.Property<string>("ConfirmedCode")
                                .HasColumnType("text")
                                .HasColumnName("confirmed_code");

                            b1.Property<DateTimeOffset?>("ConfirmedCodeExpiresAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("confirmed_code_expires_at");

                            b1.Property<bool>("IsConfirmed")
                                .HasColumnType("boolean")
                                .HasColumnName("is_confirmed");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("phone");

                            b1.HasKey("user_id")
                                .HasName("pk_users_phone");

                            b1.HasIndex("ConfirmedCode")
                                .HasDatabaseName("ix_users_phone_confirmed_code");

                            NpgsqlIndexBuilderExtensions.IncludeProperties(b1.HasIndex("ConfirmedCode"), new[] { "ConfirmedAt" });

                            b1.HasIndex("Phone")
                                .HasDatabaseName("ix_users_phone_phone");

                            b1.ToTable("users_phone", "identity");

                            b1.WithOwner()
                                .HasForeignKey("user_id")
                                .HasConstraintName("fk_users_phone_users_user_id");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("ExternalIdentities");

                    b.Navigation("Phone")
                        .IsRequired();
                });

            modelBuilder.Entity("user_roles", b =>
                {
                    b.HasOne("Core.Domain.BoundedContext.Identity.Aggregates.Role", null)
                        .WithMany()
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("Core.Domain.BoundedContext.Identity.Aggregates.User", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");
                });
#pragma warning restore 612, 618
        }
    }
}
